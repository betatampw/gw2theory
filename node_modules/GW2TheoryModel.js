GW2TheoryModel = function(arParams) {
    
  if (arParams.playerData) {
    this.playerData = arParams.playerData;
  }
  if (arParams.classData) {
    this.classData = arParams.classData;
  }  
  if (arParams.targetData) {
    this.targetData = arParams.targetData;
  }
  if (arParams.options) {
    this.options = arParams.options;
  }  
  
  this.TimeLine = {
    cooldownTimer: {},
    realTime: 0
  };   
  
  this.player = {
    speed: 210, //In combat http://wiki.guildwars2.com/wiki/Movement_speed
  };
};

GW2TheoryModel.prototype.init = function () {
  // get list avalibel skills 

    var availableSkills  = this.getAvailableSkills();       
    var bestSkill = {
      rating:0
    };
    var skillData = {};
    var allDamageVarians = [];
    //foreach avalibel skill
    for(var i in availableSkills){  
      // chek timeline                        
      if(!this.checkTimeLine(i))
        continue
        
       damageVarians = this.getDamageVarians(i)  // + bonuses
       allDamageVarians = allDamageVarians.concat(damageVarians);
        
        
    }
    
    
    
    // add to timeline
    //this.addToTimeLine(bestSkill);
    // add to result
    //this.addToResult(bestSkill);
    

  console.log(allDamageVarians)
}

GW2TheoryModel.prototype.getAvailableSkills = function () {
  // TODO 
  return this.classData.skills;
}

GW2TheoryModel.prototype.checkTimeLine = function (skillId) {
  if(this.TimeLine.cooldownTimer[skillId] && this.TimeLine.cooldownTimer[skillId]>this.TimeLine.realTime)
    return false;
  return true;  
}

GW2TheoryModel.prototype.getDamageVarians = function (skillId) {
  // TODO 
  var damageVarians = [];
  
  for (var i in this.classData.skills[skillId].damage){
  	tmpVariant = {
  		damage: this.calcDmg(this.classData.skills[skillId].damage[i]),
  		terms: this.classData.skills[skillId].damage[i].terms
  	}

  	for (var j = 0; j < damageVarians.length; j++) {
  		damageVarians[j]

  		for (var termsIndex in damageVarians[j].terms) {
  			

			switch (damageVarians[j].terms[termsIndex]) {
			  case 'range':
			    
			    break
			  default:
			    throw 'unidentive terms'
			}

  		};





  	};


    damageVarians.push(tmpVariant);
  }
  return damageVarians;
}

GW2TheoryModel.prototype.addToTimeLine = function (bestSkill) {
  this.TimeLine.cooldownTimer[bestSkill.id] = this.TimeLine.realTime + bestSkill.cd;
  this.TimeLine.realTime+= bestSkill.ct;
  return true;
}

GW2TheoryModel.prototype.addToResult = function (bestSkill) {
  // TODO
  //console.log(this.TimeLine.realTime + ' ' + bestSkill.name)
  return true;
}


GW2TheoryModel.prototype.calcDmg  = function (damageData){
	// TODO 
  // Damage = (Power * Average Weapon Strength * Skill Coefficient) / Armor
  damageValue =	Math.round(916 * 1095.5 * damageData.ratio * 1 / this.targetData.armor);
  return damageValue;
}

exports.GW2TheoryModel = GW2TheoryModel;